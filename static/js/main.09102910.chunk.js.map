{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["provider","signer","contract","accounts","connectedNetwork","rarityAddress","App","useState","savedPatterns","setSavedPatterns","msg","setMsg","walletStatus","setWalletStatus","reward","setReward","sp","Array","fill","squarePattern","setSquarePattern","s","style","setStyle","patternLimit","setPatternLimit","address","setAddress","a","walletConnected","window","ethereum","request","method","initialize","ethers","providers","Web3Provider","getNetwork","getSigner","getAddress","Contract","Rarity","abi","console","log","toString","eventFilter","filters","newPattern","on","metadata","event","refreshAccount","message","fetchPatterns","checkReward","length","chainId","overrides","value","utils","parseEther","submitPattern","fetchPatternIDs","data","patternText","i","fetchPattern","pattern","patternIsActive","claimReward","claim","wait","receipt","_reward","status","parseInt","formatEther","res","toFixed","squareClicked","slice","newStyle","background","useEffect","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09102910.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers' \nimport Rarity from './artifacts/contracts/Rarity.sol/Rarity.json'\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst rarityAddress = \"0x8E64fa6455D8A30548Ff1313D03b69B2EB4A7650\"\nlet provider \nlet signer\nlet contract \nlet accounts\nconst  numSquares = 9\nconst networkID = 3 //ropsten\n//const networkID = 1337 //localhost\nlet  connectedNetwork  \n\nfunction App() {\n\n  const [savedPatterns, setSavedPatterns] = useState()\n  const [msg, setMsg] = useState()\n  const [walletStatus, setWalletStatus] = useState(\"Connect Wallet\")\n  const [reward, setReward] = useState(\"0.0\")\n  const sp = new Array(numSquares).fill(0)\n  const [squarePattern, setSquarePattern] = useState(sp)\n  const s = new Array(numSquares)\n  const [style, setStyle] = useState(s)\n  const [patternLimit, setPatternLimit] = useState(0)\n  const [address, setAddress] = useState()\n\n  useEffect(() => {\n    initialize()\n  },[])\n  \n  async function connectWallet() {\n    if(walletConnected())return\n      accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      initialize()\n  }\n  \n  async function initialize() {\n    if (window.ethereum) {\n      try {\n        //console.log(\"initializing\")\n        accounts = await window.ethereum.request({ method: 'eth_accounts' });\n        provider = new ethers.providers.Web3Provider(window.ethereum)\n        connectedNetwork  = await provider.getNetwork()\n        signer = provider.getSigner()\n        setAddress( await signer.getAddress())\n        contract = new ethers.Contract(rarityAddress, Rarity.abi, signer)\n        setPatternLimit( await contract.patternLimit())\n        console.log(patternLimit.toString())\n\n        const eventFilter = contract.filters.newPattern(address, null)\n        \n        //set event listener\n        contract.on(eventFilter, (  metadata, event) => {\n          console.log('Address  :', metadata);\n          console.log('Pattern Id : ', event.toString());  //Event object\n          setMsg(`Pattern ID No. ${event.toString()} has been submitted!`)\n          refreshAccount()\n        });\n        \n      } catch (err) {\n        console.log(\"Error connecting Wallet: \"+ err.message)\n        setMsg(\"Please Connect Wallet\")\n        return false\n      }\n      setMsg(\"\")\n      refreshAccount()\n    } else {\n      setMsg(\"Please install Metamask\")\n      return false\n    }\n  }\n\n  function refreshAccount() { \n      fetchPatterns()\n      checkReward()\n  }\n\n  function walletConnected() {\n    if (window.ethereum && accounts && accounts.length > 0) {\n      if (connectedNetwork.chainId !== networkID){ //change this when deploying\n        setMsg(\"Please connect to correct Network\")\n        return false\n      }\n      setWalletStatus(\"Wallet Connected\")\n      return true\n    } else {\n      setWalletStatus(\"Connect Wallet\")\n      setAddress(\"\")\n      setMsg(\"Please Connect Wallet\")\n      return false\n    }\n  }\n\n  async function submitPattern() {\n    if (!walletConnected()) return\n    let overrides = {\n      value: ethers.utils.parseEther(\"0.1\")     // ether in this case MUST be a string\n    }; \n    console.log(\"send tx: \", squarePattern);\n    let transaction;\n    try {\n      transaction = await contract.submitPattern(squarePattern, overrides)\n    } catch (err) {\n      setMsg(err.message)\n      return false\n    }\n    setMsg(\"Tx Pending\")\n    /* Instead of using a receipt we are listening for the event now\n    const receipt = await transaction.wait()\n    if(receipt.status === 1) {\n      setMsg(\"Pattern submission sucessful!\")\n    } else {\n      setMsg(\"There was an error submitting your pattern, please try again\")\n      return false;\n    }\n    */\n  }\n  \n  async function fetchPatterns() {\n    if (!walletConnected()) return\n      try {\n        const data = await contract.fetchPatternIDs()\n        let patternText = \"\"\n        if(data.length > 0){\n          for (let i = 0; i < data.length; i++) {\n            const pattern = await contract.fetchPattern(data[i])\n            const active = await contract.patternIsActive(data[i])\n            if(active) patternText += \"Pattern ID \" + data[i] + \": \" + pattern + \"\\n\"\n          }\n          setSavedPatterns(patternText) \n        } else {\n          setSavedPatterns(\"No Patterns Found\")\n        }\n\n      } catch (err) {\n        setMsg(err)\n      }\n  }\n\n  async function claimReward() {\n    if (!walletConnected()) return\n    if (reward === 0) {\n      setMsg(\"No Reward to Claim\")\n      return\n    }\n    let claim\n    try {\n    claim = await contract.claimReward();\n    } catch (err) {\n      setMsg(err.message)\n      return false\n    }\n    setMsg(\"Tx Pending\")\n    const receipt = await claim.wait()\n    //wait for transaction to finish\n    //check the reward amount, update msg, check that reward is zeroed out\n    const _reward = await checkReward() \n    console.log(_reward)\n    if(receipt.status === 1 && parseInt(_reward) === 0) {\n      setMsg(reward + \" Eth Reward Claimed Sucessfully\")\n    } else {\n      setMsg(\"There was an error, please try again\")\n      return false;\n    }\n  }\n\n  async function checkReward() {\n    if (!walletConnected()) return\n    try {\n      const _reward = ethers.utils.formatEther(await contract.checkReward())\n      const res = (+_reward).toFixed(2);\n      setReward(res)\n      return _reward\n    } catch (err) {\n      setMsg(err)\n    }\n  }\n\n\n  function squareClicked(i){\n    const newPattern = squarePattern.slice()\n    const newStyle = style.slice()\n    if(!newPattern[i]) {\n      newPattern[i] = 1\n      newStyle[i] = { background : 'grey'}\n    }else {\n      newPattern[i] = 0\n      newStyle[i] = {background : 'white'}\n    }\n    setStyle(newStyle)\n    setSquarePattern(newPattern)\n  }\n\n        //<input onChange={e => setPatternValue(e.target.value)} placeholder=\"Submit Pattern\" />\n  return (\n    <div className=\"App\">\n      <div className=\"topBar\">\n        <div className=\"claim\">\n          <button onClick={claimReward}>Claim Reward</button>\n          <span className=\"reward\">Reward: {reward} Eth</span>\n        </div>\n\n        <div className=\"wallet\">\n          <button onClick={connectWallet}>{walletStatus}</button>\n          <div className=\"address\">{address && address.slice(0,5) + \"...\" + address.slice(-4)}</div>\n        </div>\n      </div>\n      <div className=\"msg\">{msg}</div>\n      <h1 className=\"Title\">The Rarity Game</h1>\n      <div className=\"gameContainer\">\n        <div className=\"gameAndButton\">\n          <div className=\"game\">\n            <div className=\"game-board\">\n              <div className=\"board-row\">\n                <button className=\"square\" style={style[0]} onClick={() =>squareClicked(0)}></button>\n                <button className=\"square\" style={style[1]} onClick={() => squareClicked(1)}></button>\n                <button className=\"square\" style={style[2]} onClick={() =>squareClicked(2)}></button>\n              </div>\n              <div className=\"board-row\">\n                <button className=\"square\" style={style[3]} onClick={() =>squareClicked(3)}></button>\n                <button className=\"square\" style={style[4]} onClick={() =>squareClicked(4)}></button>\n                <button className=\"square\" style={style[5]} onClick={() =>squareClicked(5)}></button>\n              </div>\n              <div className=\"board-row\">\n                <button className=\"square\" style={style[6]} onClick={() =>squareClicked(6)}></button>\n                <button className=\"square\" style={style[7]} onClick={() =>squareClicked(7)}></button>\n                <button className=\"square\" style={style[8]} onClick={() =>squareClicked(8)}></button>\n              </div>\n            </div>\n          </div>\n\n          <button onClick={submitPattern}>Save Pattern</button>\n        </div>\n        <div className=\"instructions\">\n          <ul>\n            <b>Rules:</b>\n            <li>Create and submit a unique pattern by selecing boxes.</li>\n            <li>After the pattern limit of {patternLimit.toString()} patterns is reached, \n            each new pattern submission will trigger a burn of the most common pattern submission</li>\n            <li>A pattern submissionn fee of 0.1 Eth is collected and evenly divided up amongst current patterns</li>\n            <li>If a pattern is elimainated, the rewards it has earned remain available, but the pattern will earn no additional rewards</li> \n            <li>Pattern owners can withdraw rewards earned by their patterns at anytime</li> \n            <li>The longer your pattern stays active, the more rewards you earn!</li> \n          </ul>\n        </div>\n\n      </div>\n      <div>\n        <h2 className=\"app-pattern-title\">Your Active Patterns</h2>\n        <div className=\"app-pattern\">{savedPatterns}</div>\n      </div>\n    </div>\n  );\n}\n\n  \nexport default App\n//","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}